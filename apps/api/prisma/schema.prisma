// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  superAdmin
  outletAdmin
  worker
  driver
  customer
}

enum Station {
  washing
  ironing
  packing
}

enum OrderStatus {
  menungguPenjemputanDriver
  laundryMenujuOutlet
  laundrySampaiOutlet
  pencucian
  penyetrikaan
  packing
  menungguPembayaran
  siapDiantar
  sedangDikirim
  selesai
}

enum PaymentStatus {
  unpaid
  pending
  paid
}

enum Activity {
  pickUp
  delivery
}

model Customer {
  customerId Int       @id @default(autoincrement())
  email      String    @unique
  password   String?
  isVerified Boolean   @default(false)
  fullName   String
  address    Address[]
  avatar     String?
  role       Role      @default(customer)
  order      Order[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
}

model Address {
  addressId     Int       @id @default(autoincrement())
  customerId    Int
  provinsi      String?
  kota          String?
  kecamatan     String?
  longitude     Float?
  latitude      Float?
  detailAddress String
  isPrimary     Boolean   @default(false)
  // relations
  customer      Customer  @relation(fields: [customerId], references: [customerId])
}

model Employee {
  employeeId  Int          @id @default(autoincrement())
  email       String       @unique
  password    String
  isVerified  Boolean      @default(false)
  fullName    String
  avatar      String?
  role        Role
  outletId    Int
  attendance  Attendance[]
  outletAdmin OutletAdmin?
  worker      Worker?
  driver      Driver?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?
  //relations
  outlet      Outlet       @relation(fields: [outletId], references: [outletId])
}

model OutletAdmin {
  outletAdminId Int      @id @default(autoincrement())
  isAvailable   Boolean  @default(false)
  employee      Employee @relation(fields: [employeeId], references: [employeeId])
  employeeId    Int      @unique
  orders        Order[]
}

model Worker {
  workerId     Int               @id @default(autoincrement())
  station      Station
  employee     Employee          @relation(fields: [employeeId], references: [employeeId])
  employeeId   Int               @unique
  orders       WorkersOnOrders[]
  Notification Notification[]
}


model Outlet {
  outletId  Int        @id @default(autoincrement())
  name      String
  provinsi  String?
  kota      String?
  kecamatan String?
  longitude Float?
  latitude  Float?
  employee  Employee[]
  oders     Order[]
}

model Order {
  orderId           Int               @id @default(autoincrement())
  outletId          Int
  outletAdminId     Int? // id of outlet admin who accepted the order
  workers           WorkersOnOrders[] // setiap orderan berisi 3 workers (3 stations)
  drivers           DriversOnOrders[] // setiap orderan berpotensi dihandle oleh 2 driver yg berbeda (pickup/ delivery)
  customerId        Int
  customerAddressId Int
  items             Items[]
  pricePerKg        Int               @default(12000)
  weight            Float             @default(0)
  bypassMessage     String?
  paymentStatus     PaymentStatus     @default(unpaid)
  driverId          Int?
  pickupDate        DateTime
  pickupTime        String?
  complain          String?
  status            OrderStatus
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  outlet      Outlet       @relation(fields: [outletId], references: [outletId])
  outletAdmin OutletAdmin? @relation(fields: [outletAdminId], references: [outletAdminId])
  customer    Customer     @relation(fields: [customerId], references: [customerId])

  Notification Notification[]
}

model Items {
  itemId   Int    @id @default(autoincrement())
  orderId  Int
  item     String
  quantity Int

  // relations
  order Order @relation(fields: [orderId], references: [orderId])
}

model Attendance {
  attendanceId Int       @id @default(autoincrement())
  employeeId   Int
  clockIn      DateTime?
  clockOut     DateTime?

  // relations
  employee Employee @relation(fields: [employeeId], references: [employeeId])
}

model WorkersOnOrders {
  order     Order    @relation(fields: [orderId], references: [orderId])
  orderId   Int
  worker    Worker   @relation(fields: [workerId], references: [workerId])
  workerId  Int
  createdAt DateTime @default(now())

  @@id([orderId, workerId])
}

model Driver {
  driverId    Int               @id @default(autoincrement())
  isAvailable Boolean           @default(true)
  employee    Employee          @relation(fields: [employeeId], references: [employeeId])
  employeeId  Int               @unique
  orders      DriversOnOrders[]
}

model DriversOnOrders {
    id        Int      @id @default(autoincrement())
    order     Order    @relation(fields: [orderId], references: [orderId])
    orderId   Int
    driver    Driver   @relation(fields: [driverId], references: [driverId])
    driverId  Int
    activity  Activity
    status    String   @default("Pending") // add status if needed
    createdAt DateTime @default(now())
}


model ListAddress {
  id            Int    @id @default(autoincrement())
  provinceId    Int
  province      String
  cityId        Int
  city          String
  subdistrictId Int
  subdistrict   String
}

model Notification {
  id        Int      @id @default(autoincrement())
  workerId  Int
  orderId   Int
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  worker    Worker   @relation(fields: [workerId], references: [workerId])
  order     Order    @relation(fields: [orderId], references: [orderId])
}
