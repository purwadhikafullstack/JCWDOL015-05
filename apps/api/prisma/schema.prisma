// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  superAdmin
  outletAdmin
  worker
  driver
  customer
}

enum Station {
  washing
  ironing
  packing
}

enum OrderStatus { 
  menungguPenjemputanDriver
  laundryMenujuOutlet
  laundrySampaiOutlet
  pencucian
  penyetrikaan
  packing
  menungguPembayaran
  siapDiantar
  sedangDikirim
  selesai
}

enum PaymentStatus {
  unpaid
  pending
  paid
}

enum Activity {
  pickUp
  delivery
}

model Customer {
  customerId Int  @id @default(autoincrement())
  email String @unique
  password String?
  isVerified Boolean @default(false)
  fullName String 
  address Address[]
  avatar String?
  role Role @default(customer)
  notification String?
  order Order[] 
  createdAt DateTime  @default(now())
  updatedAt DateTime?
}

model Address {
  addressId Int @id @default(autoincrement())
  customerId Int 
  provinsi String?
  kota String?
  kecamatan String?
  longitude Float?
  latitude Float?
  detailAddress String
  // relations
  customer Customer @relation(fields: [customerId], references: [customerId])
}

model Employee {
  employeeId Int @id @default(autoincrement())
  email String @unique
  password String
  isVerified Boolean @default(false)
  fullName String 
  avatar String?
  role Role
  outletId Int
  attendance Attendance[]
  outletAdmin OutletAdmin?
  worker Worker?
  driver Driver?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? 
  //relations
    outlet Outlet @relation(fields: [outletId], references: [outletId])
}

model OutletAdmin { // data created with employee registration
  outletAdminId Int @id @default(autoincrement())
  isAvailable Boolean @default(false)
  employee Employee @relation(fields: [employeeId], references: [employeeId])
  employeeId Int @unique
  notification String?
  orders Order[]
}

model Worker { // data created with employee registration
  workerId Int @id @default(autoincrement())
  station Station
  employee Employee @relation(fields: [employeeId], references: [employeeId])
  employeeId Int @unique
  notification String?
  orders WorkersOnOrders[]
}

model Driver { // data created with employee registration
  driverId Int @id @default(autoincrement())
  isAvailable Boolean @default(true)
  employee Employee @relation(fields: [employeeId], references: [employeeId])
  employeeId Int @unique
  notification String?
  orders DriversOnOrders[]
}

model Outlet {
  outletId Int @id @default(autoincrement())
  name String
  provinsi String?
  kota String?
  kecamatan String?
  longitude Float? 
  latitude Float? 
  employee Employee[]
  oders Order[]
}

model Order {
  orderId Int @id @default(autoincrement())
  createdAt DateTime  @default(now())
  outletId Int 
  outletAdminId Int // id of outlet admin who accepted the order
  workers WorkersOnOrders[] // setiap orderan berisi 3 workers (3 stations)
  drivers DriversOnOrders[] // setiap orderan berpotensi dihandle oleh 2 driver yg berbeda (pickup/ delivery)
  customerId Int 
  customerAddress String // from the address input by the customer for pickup
  items Items[] 
  pricePerKg Int @default(12000)
  weight Float @default(0)
  bypassMessage String?
  paymentStatus PaymentStatus @default(unpaid)
  complain String?
  status OrderStatus

  // relations
  outlet Outlet @relation(fields: [outletId], references: [outletId])
  outletAdmin OutletAdmin @relation(fields: [outletAdminId], references: [outletAdminId])
  customer Customer @relation(fields: [customerId], references: [customerId])
}

model Items {
  itemId Int @id @default(autoincrement())
  orderId Int
  item String
  quantity Int

  // relations
  order Order @relation(fields: [orderId], references: [orderId])
}

model Attendance {
  attendanceId Int @id @default(autoincrement())
  employeeId Int 
  clockIn DateTime? 
  clockOut DateTime? 

  // relations
  employee Employee @relation(fields: [employeeId], references: [employeeId])
}

model WorkersOnOrders {
    order Order @relation(fields: [orderId], references: [orderId])
    orderId Int
    worker Worker @relation(fields: [workerId], references: [workerId])
    workerId Int
    createdAt DateTime  @default(now())

    @@id([orderId, workerId])
}

model DriversOnOrders {
    order Order @relation(fields: [orderId], references: [orderId])
    orderId Int
    driver Driver @relation(fields: [driverId], references: [driverId])
    driverId Int
    activity Activity // pickup or delivery
    createdAt DateTime  @default(now())

    @@id([orderId, driverId, activity])
}

model baseAddress{
  id Int @id @default(autoincrement())
  provinceId Int
  province String
  city String
}
model ListAddress{
  id Int @id @default(autoincrement()) 
  provinceId Int 
  province String
  cityId Int
  city String
  subdistrictId Int
  subdistrict String
}